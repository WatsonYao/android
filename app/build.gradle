import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import com.toggl.buildsrc.Libs

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.firebase.firebase-perf'

kapt {
    correctErrorTypes = true
    useBuildCache = true
}

android {
    compileSdkVersion buildConfig.compileSdk
    defaultConfig {
        // the applicationId needs to be replaced with "com.toggl.giskard" so that we can replace the current production app
        // also, when testing analytics/crashlytics/firebase, the actual package should be used (or a placeholder firebase project)
        applicationId "com.toggl"
        minSdkVersion buildConfig.minSdk
        targetSdkVersion buildConfig.targetSdk
        versionCode buildConfig.versionCode
        versionName buildConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        adhoc {
            applicationIdSuffix ".adhoc"
            versionNameSuffix "-adhoc"
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {
    implementation project(':api')
    implementation project(':architecture')
    implementation project(':calendar')
    implementation project(':common-android')
    implementation project(':database-android')
    implementation project(':environment-android')
    implementation project(':models')
    implementation project(':onboarding')
    implementation project(':reports')
    implementation project(':repository')
    implementation project(':timer-android')

    implementation Libs.Kotlin.stdlib
    implementation Libs.Dagger.dagger
    kapt Libs.Dagger.compiler
    implementation Libs.Google.firebaseCore
    implementation Libs.Google.firebaseCrashlytics
    implementation Libs.Google.firebasePerformance

    debugImplementation Libs.leakCanary

    testImplementation Libs.Test.Jupiter.api
    testRuntimeOnly Libs.Test.Jupiter.engine
    testRuntimeOnly Libs.Test.Jupiter.params
    testImplementation Libs.Test.kotlinTestRunner
    testImplementation Libs.slf4j
    testImplementation Libs.Test.mockk
    testImplementation Libs.Test.kotlinTest
    testImplementation Libs.Test.kotlinTestJunit

    androidTestImplementation Libs.AndroidX.Test.runner
    androidTestImplementation Libs.AndroidX.Test.espressoCore
}

task prepareGooglePlayServices(type: Copy) {
    from './google-services.json.template'
    into "$buildDir/tmp-google-services"

    def googleProps = new Hashtable()
    googleProps.put('TOGGL_GCM_SENDER_ID', System.getenv('TOGGL_GCM_SENDER_ID') ?: 'TOGGL_GCM_SENDER_ID')
    googleProps.put('TOGGL_DATABASE_URL', System.getenv('TOGGL_DATABASE_URL') ?: 'TOGGL_DATABASE_URL')
    googleProps.put('TOGGL_PROJECT_ID', System.getenv('TOGGL_PROJECT_ID') ?: 'TOGGL_PROJECT_ID')
    googleProps.put('TOGGL_STORAGE_BUCKET', System.getenv('TOGGL_STORAGE_BUCKET') ?: 'TOGGL_STORAGE_BUCKET')
    googleProps.put('TOGGL_DROID_GOOGLE_SERVICES_MOBILE_SDK_APP_ID', System.getenv('TOGGL_DROID_GOOGLE_SERVICES_MOBILE_SDK_APP_ID') ?: 'TOGGL_DROID_GOOGLE_SERVICES_MOBILE_SDK_APP_ID')
    googleProps.put('TOGGL_DROID_GOOGLE_SERVICES_CLIENT_ID', System.getenv('TOGGL_DROID_GOOGLE_SERVICES_CLIENT_ID') ?: 'TOGGL_DROID_GOOGLE_SERVICES_CLIENT_ID')
    googleProps.put('TOGGL_DROID_GOOGLE_SERVICES_API_KEY', System.getenv('TOGGL_DROID_GOOGLE_SERVICES_API_KEY') ?: 'TOGGL_DROID_GOOGLE_SERVICES_API_KEY')
    googleProps.put('TOGGL_DROID_DEBUG_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING', System.getenv('TOGGL_DROID_DEBUG_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING') ?: 'TOGGL_DROID_DEBUG_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING')
    googleProps.put('TOGGL_DROID_ADHOC_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING', System.getenv('TOGGL_DROID_ADHOC_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING') ?: 'TOGGL_DROID_ADHOC_GOOGLE_SERVICES_MOBILE_SDK_APP_ID_STAGING')

    expand(googleProps)
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: googleProps)
    filteringCharset = 'UTF-8'

    doLast {
        copy {
            from "$buildDir/tmp-google-services/google-services.json.template"
            into '.'
            rename { 'google-services.json' }
        }
    }
}

tasks.whenTaskAdded { task ->
    if(task.name.matches("\\.*process\\w+GoogleServices\$")){
        task.dependsOn prepareGooglePlayServices
    }
}
